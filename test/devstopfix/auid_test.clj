(ns devstopfix.auid-test
  (:require [clojure.test :refer :all]
            [devstopfix.auid :refer :all]
            [clojure.test.check :as tc]
            [clojure.test.check.generators :as gen]
            [clojure.test.check.properties :as prop]
            [clojure.test.check.clojure-test :as ct :refer (defspec)]))

(defspec test-ids-are-always-positive
  99999
  (prop/for-all [seed gen/int]
    (let [f (id-fn seed)
          id (f)]
      (> id 0))))

; TODO - cannot find a way to generate a vector of IDs
; from an int generated by test.check
; Ideally test.check would generate the seed and the machine id.
(defspec test-ids-never-duplicate
  1000
  (prop/for-all [seed gen/int]
    (let [f (id-fn 7 seed)
          sample-size 10000
          sample      (take sample-size (repeatedly #(f)))]
      (= sample-size (count (set sample))))))

; https://github.com/clojure/test.check/blob/master/doc/intro.md
(defn ascending?
  "clojure.core/sorted? doesn't do what we might expect"
  [coll]
  (every? (fn [[a b]] (<= a b))
    (partition 2 1 coll)))

(defspec test-ids-always-increase-with-time
  10
  (prop/for-all [seed gen/int]
    (let [f (id-fn 7 seed)
          sample-size 100000
          sample      (take sample-size (repeatedly #(f)))]
      (and
        (ascending? sample)
        (< (first sample) (last sample))))))
